<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Kirill Nikitin&#39;s Personal Page on Kirill Nikitin&#39;s Personal Page</title>
    <link>https://nikirill.com/</link>
    <description>Recent content in Kirill Nikitin&#39;s Personal Page on Kirill Nikitin&#39;s Personal Page</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2022 Kirill Nikitin</copyright>
    <lastBuildDate>Sun, 01 Jan 2023 00:00:00 -0500</lastBuildDate>
    <atom:link href="/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Authenticated private information retrieval</title>
      <link>https://nikirill.com/publication/apir/</link>
      <pubDate>Sun, 01 Jan 2023 00:00:00 -0500</pubDate>
      
      <guid>https://nikirill.com/publication/apir/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Integrity and Metadata Protection in Data Retrieval</title>
      <link>https://nikirill.com/talk/thesis/</link>
      <pubDate>Tue, 06 Apr 2021 00:00:00 -0400</pubDate>
      
      <guid>https://nikirill.com/talk/thesis/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Replicated state machines without replicated execution</title>
      <link>https://nikirill.com/publication/piperine/</link>
      <pubDate>Thu, 23 Jan 2020 00:00:00 -0500</pubDate>
      
      <guid>https://nikirill.com/publication/piperine/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Padded Uniform Random Blobs (PURBs)</title>
      <link>https://nikirill.com/project/purbs/</link>
      <pubDate>Sat, 07 Dec 2019 00:00:00 -0500</pubDate>
      
      <guid>https://nikirill.com/project/purbs/</guid>
      <description>&lt;p&gt;Most encrypted data formats leak metadata via their plaintext headers, such as format version, encryption schemes used,
number of recipients who can decrypt the data, and even the recipients’ identities.
This leakage can pose security and privacy risks to users, e.g., by revealing the full membership of a group of
collaborators from a single encrypted e-mail, or by enabling an eavesdropper to fingerprint the precise encryption
software version and configuration the sender used.&lt;/p&gt;

&lt;p&gt;We propose that future encrypted data formats improve security and privacy hygiene by producing
&lt;em&gt;Padded Uniform Random Blobs&lt;/em&gt; or PURBs: ciphertexts indistinguishable from random bit strings to anyone without
a decryption key. A PURB’s content leaks &lt;em&gt;nothing at all&lt;/em&gt;, even the application that created it, and is padded
such that even its length leaks as little as possible.
Encoding and decoding ciphertexts with &lt;em&gt;no&lt;/em&gt; cleartext markers presents efficiency challenges, however.
We present cryptographically agile encodings enabling legitimate recipients to decrypt a PURB efficiently, even
when encrypted for any number of recipients’ public keys and/or passwords, and when these public keys
are from different cryptographic suites. PURBs employ Padmé, a novel padding scheme that limits information leakage
via ciphertexts of maximum length &lt;em&gt;M&lt;/em&gt; to a practical optimum of O(log log &lt;em&gt;M&lt;/em&gt;) bits, comparable to
padding to a power of two, but with lower overhead of at most 12% and decreasing with larger payloads.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Reducing metadata leakage from encrypted files and communication with PURBs</title>
      <link>https://nikirill.com/publication/purbs/</link>
      <pubDate>Wed, 03 Jul 2019 00:00:00 -0400</pubDate>
      
      <guid>https://nikirill.com/publication/purbs/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Reducing Metadata Leakage from Encrypted Files and Communication with PURBs</title>
      <link>https://nikirill.com/talk/purbs/</link>
      <pubDate>Sat, 21 Jul 2018 00:00:00 -0400</pubDate>
      
      <guid>https://nikirill.com/talk/purbs/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Crux: Locality-Preserving Distributed Services</title>
      <link>https://nikirill.com/publication/crux/</link>
      <pubDate>Sat, 12 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://nikirill.com/publication/crux/</guid>
      <description></description>
    </item>
    
    <item>
      <title>CHAINIAC: Proactive Software-Update Transparency via Collectively Signed Skipchains and Verified Builds</title>
      <link>https://nikirill.com/talk/chainiac/</link>
      <pubDate>Fri, 18 Aug 2017 00:00:00 -0400</pubDate>
      
      <guid>https://nikirill.com/talk/chainiac/</guid>
      <description></description>
    </item>
    
    <item>
      <title>CHAINIAC: Proactive software-update transparency via collectively signed skipchains and verified builds</title>
      <link>https://nikirill.com/publication/chainiac/</link>
      <pubDate>Fri, 18 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://nikirill.com/publication/chainiac/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Security of software-update systems</title>
      <link>https://nikirill.com/project/chainiac/</link>
      <pubDate>Sat, 06 May 2017 00:00:00 +0000</pubDate>
      
      <guid>https://nikirill.com/project/chainiac/</guid>
      <description>&lt;p&gt;Software-update mechanisms are critical to the security of modern systems, but their typically centralized design
presents a lucrative and frequently attacked target. In this work, we propose CHAINIAC, a decentralized software-update
framework that eliminates single points of failure, enforces transparency, and provides efficient verifiability of
integrity and authenticity for software-release processes. Independent &lt;em&gt;witness servers&lt;/em&gt; collectively verify
conformance of software updates to release policies, &lt;em&gt;build verifiers&lt;/em&gt; validate the source-to-binary correspondence,
and a tamper-proof release log stores collectively signed updates, thus ensuring that no release is accepted by clients
before being widely disclosed and validated. The release log embodies a skipchain, a novel data structure, enabling
arbitrarily out-of-date clients to efficiently validate updates and signing keys.
Evaluation of our CHAINIAC prototype on reproducible Debian packages shows that the automated update process takes
the average of 5 minutes per release for individual packages, and only 20 seconds for the aggregate timeline.
We further evaluate the framework using real-world data from the PyPI package repository and show that it offers
clients security comparable to verifying every single update themselves while consuming only one-fifth of the bandwidth
and having a minimal computational overhead.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Axiom - DTLS-based secure IoT group communication</title>
      <link>https://nikirill.com/publication/axiom/</link>
      <pubDate>Sat, 01 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://nikirill.com/publication/axiom/</guid>
      <description></description>
    </item>
    
    <item>
      <title>The Collective Authority (Cothority) Framework</title>
      <link>https://nikirill.com/project/cothority/</link>
      <pubDate>Sun, 06 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>https://nikirill.com/project/cothority/</guid>
      <description></description>
    </item>
    
    <item>
      <title>tinygroupdtls</title>
      <link>https://nikirill.com/project/tinygroupdtls/</link>
      <pubDate>Sun, 06 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>https://nikirill.com/project/tinygroupdtls/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>
